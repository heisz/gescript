/*
 * Grammar definition file for the script parser.
 *
 * Copyright (C) 2005-2024 J.M. Heisz.  All Rights Reserved.
 * See the LICENSE file accompanying the distribution your rights to use
 * this software.
 */

%{

package parser

import (
    "github.com/heisz/gescript/types"
)

const (
    PARSED_UNDEFINED = iota
    PARSED_IDENTIFIER
    PARSED_LITERAL
    PARSED_REGEXP
    PARSED_VALUE
    PARSED_ARGLIST
    PARSED_ARRAY_REFERENCE
    PARSED_OPCODE
    PARSED_MEMBER
)

%}

/*
 * Working structure for the goyacc parser.  Unfortunately the goyacc generator
 * doesn't support %param elements like the C version, so this structure is
 * a mix of lexer output, parse symbols and the parsing context reference...
 */
%union {
    // Lexical output from the lexer
    identifier string
    literal types.DataType
    assignOp int

    // Parse symbol details (from lexer and grammar rules)
    parseType int
    opIndex int

    // Reference to the overall parsing context
    ctx *parsingContext
}

// Defined token instances (generated by parser)
%token GTOK_IDENTIFIER GTOK_LITERAL GTOK_REGEXP GTOK_ERROR

// Defined/supported keywords
%token GTOK_BREAK GTOK_CASE GTOK_CATCH GTOK_CLASS GTOK_CONST, GTOK_CONTINUE
%token GTOK_DEBUGGER GTOK_DEFAULT GTOK_DELETE GTOK_DO GTOK_ELSE GTOK_EXPORT
%token GTOK_EXTENDS GTOK_FINALLY GTOK_FOR GTOK_FUNCTION GTOK_IF GTOK_IMPORT
%token GTOK_IN GTOK_INSTANCEOF GTOK_LET GTOK_NEW GTOK_RETURN GTOK_SUPER
%token GTOK_SWITCH GTOK_THIS GTOK_THROW GTOK_TRY GTOK_TYPEOF GTOK_VAR
%token GTOK_VOID GTOK_WHILE GTOK_WITH GTOK_YIELD

%token GTOK_AWAIT GTOK_ENUM GTOK_IMPLEMENTS GTOK_INTERFACE GTOK_PACKAGE
%token GTOK_PRIVATE GTOK_PROTECTED GTOK_PUBLIC

// Not keywords, but key/reserved words nonetheless
%token GTOK_NULL GTOK_TRUE GTOK_FALSE

// Operators/punctuators
%token GTOK_LC GTOK_RC GTOK_LP GTOK_RP GTOK_LB GTOK_RB
%token GTOK_DOT GTOK_SEMI GTOK_COMMA GTOK_LT GTOK_GT GTOK_LTEQ
%token GTOK_GTEQ GTOK_EQEQ GTOK_NOTEQ GTOK_EQEQEQ GTOK_NOTEQEQ
%token GTOK_ADD GTOK_SUB GTOK_MULT GTOK_DIV GTOK_MOD GTOK_INCR GTOK_DECR
%token GTOK_LTLT GTOK_GTGT GTOK_GTGTGT GTOK_AND GTOK_OR GTOK_XOR
%token GTOK_NOT GTOK_TILDE GTOK_ANDAND GTOK_OROR GTOK_QMARK GTOK_COLON
%token GTOK_ASSIGNOP GTOK_REGEQ GTOK_REGNOTEQ

// Additional definitions to clear grammar parse conflicts
%left GTOK_LTLT GTOK_GTGT GTOK_GTGTGT
%left GTOK_ADD GTOK_SUB
%left GTOK_MULT GTOK_DIV GTOK_MOD GTOK_XOR GTOK_OR GTOK_AND
%nonassoc GTOK_INCR GTOK_DECR
%nonassoc UNARY_OP
%nonassoc LOWER_THAN_ELSE
%nonassoc GTOK_ELSE

%%

Program:
        | Literal
          {
              $$ = $1
              $$.pushEvalExpression(&$1)
          };

/* Note: this condenses Section 11.8 literals (lexer) with 12.2.4 */
Literal:
        GTOK_NULL
          {
              /* Section 11.8.1 NullLiteral */
              $$.parseType = PARSED_LITERAL
              $$.literal = types.NullType{}
              $$.opIndex = $1.opIndex
          }
         | GTOK_TRUE
          {
              /* Section 11.8.2 BooleanLiteral */
              $$.parseType = PARSED_LITERAL
              $$.literal = types.BooleanType(true)
              $$.opIndex = $1.opIndex
          }
         | GTOK_FALSE
          {
              /* Section 11.8.2 BooleanLiteral */
              $$.parseType = PARSED_LITERAL
              $$.literal = types.BooleanType(false)
              $$.opIndex = $1.opIndex
          }
        | GTOK_LITERAL
            /* Parse noop, $$ = $1 */
            /* Covers 11.8.3-11.8.6 (Numeric, String, Regex and Template) */
            /* TODO - still need to handle template in lexer */
        ;

%%
